abstract class OrderProcessTemplate                         //Template pattern
{ 
    public boolean isGift; 
  
    public abstract void doSelect(); 
  
    public abstract void doPayment(); 
  
    public final void giftWrap() 
    { 
        try
        { 
            System.out.println("Gift wrap successful"); 
        } 
        catch (Exception e) 
        { 
            System.out.println("Gift wrap unsuccessful"); 
        } 
    } 
  
    public abstract void doDelivery(); 
  
    public final void processOrder(boolean isGift) 
    { 
        doSelect(); 
        doPayment(); 
        if (isGift) { 
            giftWrap(); 
        } 
        doDelivery(); 
    } 
} 
  
  
class NetOrder extends OrderProcessTemplate 
{ 
    @Override
    public void doSelect() 
    { 
        System.out.println("Item added to online shopping cart"); 
        System.out.println("Get delivery address."); 
    } 
  
    @Override
    public void doPayment() 
    { 
        System.out.println 
                   ("Online Payment through Netbanking, card or Paytm"); 
    } 
  
    @Override
    public void doDelivery() 
    { 
        System.out.println 
                    ("Ship the item through post to delivery address"); 
    } 
  
} 
  
class StoreOrder extends OrderProcessTemplate 
{ 
  
    @Override
    public void doSelect() 
    { 
        System.out.println("Customer chooses the item from shelf."); 
    } 
  
    @Override
    public void doPayment() 
    { 
        System.out.println("Pays at counter through cash/POS"); 
    } 
  
    @Override
    public void doDelivery() 
    { 
        System.out.println("Item delivered to in delivery counter."); 
    } 
  
} 
  
 
interface ItemElement                                 //visitors pattern
{ 
	public int accept(ShoppingCartVisitor visitor); 
} 

class Book implements ItemElement 
{ 
	private int price; 
	private String isbnNumber; 

	public Book(int cost, String isbn) 
	{ 
		this.price=cost; 
		this.isbnNumber=isbn; 
	} 

	public int getPrice() 
	{ 
		return price; 
	} 

	public String getIsbnNumber() 
	{ 
		return isbnNumber; 
	} 

	@Override
	public int accept(ShoppingCartVisitor visitor) 
	{ 
		return visitor.visit(this); 
	} 

} 

class Fruit implements ItemElement 
{ 
	private int pricePerKg; 
	private int weight; 
	private String name; 

	public Fruit(int priceKg, int wt, String nm) 
	{ 
		this.pricePerKg=priceKg; 
		this.weight=wt; 
		this.name = nm; 
	} 

	public int getPricePerKg() 
	{ 
		return pricePerKg; 
	} 

	public int getWeight() 
	{ 
		return weight; 
	} 

	public String getName() 
	{ 
		return this.name; 
	} 

	@Override
	public int accept(ShoppingCartVisitor visitor) 
	{ 
		return visitor.visit(this); 
	} 

} 

interface ShoppingCartVisitor 
{ 

	int visit(Book book); 
	int visit(Fruit fruit); 
} 

class ShoppingCartVisitorImpl implements ShoppingCartVisitor 
{ 

	@Override
	public int visit(Book book) 
	{ 
		int cost=0; 
		//apply 5$ discount if book price is greater than 50 
		if(book.getPrice() > 50) 
		{ 
			cost = book.getPrice()-5; 
		} 
		else
			cost = book.getPrice(); 
			
		System.out.println("Book ISBN::"+book.getIsbnNumber() + " cost ="+cost); 
		return cost; 
	} 

	@Override
	public int visit(Fruit fruit) 
	{ 
		int cost = fruit.getPricePerKg()*fruit.getWeight(); 
		System.out.println(fruit.getName() + " cost = "+cost); 
		return cost; 
	} 

} 

public class design_patterns_behaviouralPatterns {


	public static void main(String[] args) 
	
	
	{ 
		OrderProcessTemplate netOrder = new NetOrder(); 
        netOrder.processOrder(true); 
        System.out.println(); 
        
        
		ItemElement[] items = new ItemElement[]{new Book(20, "1234"), 
							new Book(100, "5678"), new Fruit(10, 2, "Banana"), 
							new Fruit(5, 5, "Apple")}; 

		int total = calculatePrice(items); 
		System.out.println("Total Cost = "+total); 
		
		System.out.println(); 
		
		OrderProcessTemplate storeOrder = new StoreOrder(); 
        storeOrder.processOrder(false); 
        
         items = new ItemElement[]{new Book(190, "4747"), 
				new Book(100, "2478"), new Fruit(40, 1, "promoganate"), 
				new Fruit(5, 5, "Apple")}; 

         total = calculatePrice(items); 
        System.out.println("Total Cost = "+total);
	} 

	private static int calculatePrice(ItemElement[] items) 
	{ 
		ShoppingCartVisitor visitor = new ShoppingCartVisitorImpl(); 
		int sum=0; 
		for(ItemElement item : items) 
		{ 
			sum = sum + item.accept(visitor); 
		} 
		return sum; 
	} 

} 




	